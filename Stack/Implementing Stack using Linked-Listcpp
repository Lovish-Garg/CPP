// Here I willnot do input checking much because I'm just implementing Stack using LinkedList
#include <iostream>

using std::cin;
using std::cout;
using std::endl;

class Node
{
    public:
        int data;
        Node *link;
        
        Node (int data)
        {
            this->data = data;
        }
};

class Stack
{
    private:
        // for taking record of topmost node of stack 
        Node *top;
        int num_elem;// to take record of number of elements in stack
    public:
        Stack()
        {
            num_elem = 0;
            top = NULL;
        }
        
        // inline because this function is very small and inline can make it efficient when this function is called many times 
        inline bool isEmpty()
        {
            // if stack is empty then return true else false
            return (top == NULL) ? true : false;
        }

        void push(int data)
        {
            Node *temp = new Node(data);// here the constructor will assign the value to this Node->data see Node class for understanding

            // means if temp == NULL then there is heap overflow
            if (!temp)
            {
                cout << "Heap Overflow!\n";
                exit(1);
            }

            else 
            {
                // assigning temp->link the value inside top and then assigning top the address of new Node
                temp->link = top;
                top = temp;
                ++num_elem;
            }
        }

        int pop()
        {
            if (isEmpty())
            {   
                cout << "Stack Underflow\n";
                // means return 32bit or 4bytes integer minimum value that it can hold
                return INT32_MIN;
            }
                
            else 
            {
                // store the topmost value
                int pop_value = top->data;
                
                //then I'm storing the address of topmost node in temp_delete and assingning top = top->link It is all because if I delete top directly then if I do any operations using top then it will lead to undefined
                Node *temp_del = top;
                top = top->link;
                
                delete temp_del;

                return pop_value;
            }
        }

        // simple
        int count()
        {
            return num_elem;
        }

        // returning the topmost element
        int peek()
        {   
            if (isEmpty())
            {
                cout << "Stack Underflow\n";
                return INT32_MIN;
            }

            else 
                return top->data;
        }

        //changing data at topmost-position in Stack
        void change(int data)
        {
            if (isEmpty())
            {
                cout << "Stack is Empty\n";
                return;
            }

            top->data = data;
            cout << "Item changed at topmost " << data << endl;
        }

        // display stack
        void display()
        {
            if (isEmpty())
            {
                cout << "Stack is empty\n";
                return;
            }
            else
            {
                // traversing linked-list
                Node *temp = top;
                while (temp)
                {
                    cout << temp->data << " ";
                    temp = temp->link;
                }
            }

            cout << endl;
            return;
        }

        // to release the memory
        ~Stack()
        {
            
            while (top)// traversing and deleteing the whole linked-lis
            {
                Node *temp = top;
                top = top->link;
                delete temp;
            }
        }
};

void menu()
{
    cout << "\nInput 0 for exit\nInput 1 for push\nInput 2 for pop\nInput 3 for peek\nInput 4 for count\nInput 5 for change\nInput 6 for display\nInput 7 for clear\n\nInput your choice: ";
}

int main()
{
    int n;
    int choice;// variable to store choice of user
    Stack stack;

    do
    {
        int data;// to store data for change and push
        menu();
        cin >> choice;

        // switch case to check what user want
        switch(choice)
        {
            // case 0 because if it isnot available then default case will run
            case 0:
                break;
            case 1:
                cout << "Input data to be pushed: ";
                cin >> data;
                stack.push(data);
                break;

            case 2:
                cout << "Returned value after pop: " << stack.pop();
                break;

            case 3:
                stack.peek();
                break;
            
            case 4:
                cout << "Number of elements in stack: " << stack.count();
                break;

            case 5:
                cout << "Input data for change: ";
                cin >> data;

                stack.change(data);
                break;

            case 6:
                stack.display();
                break;

            case 7:
                system("clear");// you can change it to cls for Windows
                break;

            default:
                cout << "Invalid input\n";
        }
        while (getchar() != '\n');
        getchar();
    }
    while (choice != 0);

    cout << "Stack ended\n";
} 
